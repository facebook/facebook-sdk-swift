{# Macros for determining specific types #}
{% macro isClass variable %}{% if variable.type.kind == "class" %}true{% endif %}{% endmacro %}
{% macro isEnum variable %}{% if variable.type.kind == "enum" %}true{% endif %}{% endmacro %}
{% macro isCustomType variable %}{% if variable.type
  and not variable.type.name == "String"
  and not variable.type.name == "Int"
  and not variable.type.name == "Double"
  and not variable.type.name == "Float"
  %}true{% endif %}{% endmacro %}
{% macro isEnumArray variable %}{% if variable.typeName.array.elementType.kind == "enum" %}true{% endif %}{% endmacro %}
{% macro isStruct variable %}{% if variable.type.kind == "struct" %}true{% endif %}{% endmacro %}
{% macro isClosureType variable %}{% if variable.typeName.isClosure %}true{% endif %}{% endmacro %}
{% macro associatedTypeName associatedValue %}{{ associatedValue.type.name }}{% endmacro %}

{# Macros for setting parameters in ObjC initializer #}
{% macro classOrStructParameterForInitializer variable %}
  // Class or struct
  {{ variable.name }}: _ObjC{{ variable.typeName }}{% if variable.isOptional %}?{% endif %}{% if not forloop.last %},{% endif %}
{% endmacro %}
{# --- #}
{% macro enumParameterForInitializer variable %}
  // Enum
  {{ variable.name }}: Any{% if variable.isOptional %}?{% endif %}{% if not forloop.last %},{% endif %}
{% endmacro %}
{# --- #}
{% macro enumArrayParameterForInitializer variable %}
  // Enum Array
  {{ variable.name }}: Any{% if variable.isOptional %}?{% endif %}{% if not forloop.last %},{% endif %}
{% endmacro %}
{# --- #}
{% macro nativeTypeParameterForInitializer variable %}
  // Native type
  // {{variable.typeName.generic.name}}
  {{ variable.name }}: {{ variable.typeName }}{% if variable.defaultValue != nil %} = {{ variable.defaultValue }}{% endif %}{% if not forloop.last %},{% endif %}
{% endmacro %}

{# Macro for initializing enum wrapper #}
{% macro setupInitializers enum %}
  {# --- #}
  {% set hasCases %}{% if enum.cases.count > 0 %}true{% endif %}{% endset %}
  {# --- #}
  {% if hasCases %}
    {# Handles caseless enum #}
    // Enum has cases
  {% if hasCases %}private(set) var {{enum.name|lowerFirstWord}}: {{enum.name}}{% endif %}
    // Initializer for Objective-C code
    @objc public init(caseValue: Any) {
    {% for case in enum.cases %}
    {% if forloop.first %}
      if let{% else %}
      else if let{% endif %} {% if case.hasAssociatedValue %}caseValue{% else %}_{% endif %} = caseValue as? _ObjC{{ enum.name }}{% if case.name == "`default`" %}Default{% else %}{{ case.name|capitalize }}{% endif %} {
    {% if case.hasAssociatedValue %}
        self.{{ enum.name|lowerFirstWord }} = .{{ case.name }}(
          {% for associatedValue in case.associatedValues %}{% call bridgeStructOrNative associatedValue caseValue %}{% endfor %}
        )
    {% else %}
        self.{{ enum.name|lowerFirstWord }} = .{{ case.name }}
    {% endif %}
      }
    {% endfor %}
      else {
        preconditionFailure("Value \(caseValue) is not compatible with cases of {{enum.name}}")
      }
    }
  {% else %}
    // Enum has no cases
  @objc public override init() {}
  {% endif %}
{% endmacro %}
{#  #}
{# Macro for Setting up enum properties #}

import FacebookCore
import Foundation

// Bridging of enums
{% macro bridgeStructOrNative associatedValue caseValue %}
  {# --- #}
  {% set isEnum %}{% call isEnum associatedValue %}{% endset %}
  {% set isStruct %}{% call isStruct associatedValue %}{% endset %}
  {# --- #}
  {% filter indent:8 %}
  {% if associatedValue.localName == nil %}
    caseValue.value{{forloop.counter}}{%if isStruct or isEnum %}.{{associatedTypeName|lowerFirstWord}}{% endif %}
  {% else %}
    {{associatedValue.localName}}: caseValue.value{{forloop.counter}}
  {% endif %}
  {% endfilter %}
{% endmacro %}

{% for type in types.implementing.ObjCBridgeable|enum %}
{#  #}
@objc(FB{{type.name}})
public class _ObjC{{type.name}} : NSObject {

  {% call setupInitializers type %}

  {% include "./Shared/SetupProperties.stencil" %}
  {% include "./Shared/SetupMethods.stencil" %}
  {% include "./Shared/Equatable.stencil" %}
  {% include "./Shared/Comparable.stencil" %}
}
{#  #}
{# Macro for initializer parameters on individual enum cases #}
{% macro initializerParametersForEnumCase case %}
  {% for associatedValue in case.associatedValues %}
        value{{forloop.counter}} :
        {# --- #}
        {% set isClass %}{% call isClass parameter %}{% endset %}
        {% set isEnum %}{% call isEnum parameter %}{% endset %}
        {% set isEnumArray %}{% call isEnumArray parameter %}{% endset %}
        {% set isCustomType %}{% call isCustomType parameter %}{% endset %}
        {# --- #}
        {% if isEnum %}
          {% call enumParameterForInitializer parameter %}
        {% elif isEnumArray %}
          {% call enumArrayParameterForInitializer parameter %}
        {% elif isCustomType %}
          {% call classOrStructParameterForInitializer parameter %}
        {% elif not isStatic and not isComputed %}
          {% call nativeTypeParameterForInitializer parameter %}
        {% endif %}
    : _ObjC{{ associatedValue.typeName }} {% if not forloop.last %},{% endif %}
  {% endfor %}
{% endmacro %}
{#  #}
{# Declaring wrappers for individual cases #}
{% for case in type.cases %}
// A case of {{type.name}}
@objc(FB{{type.name}}{% if case.name == "`default`" %}Default{% else %}{{ case.name|capitalize }}{% endif %})
public class _ObjC{{type.name}}{% if case.name == "`default`" %}Default{% else %}{{ case.name|capitalize }}{% endif %} : NSObject {
  {% for associatedValue in case.associatedValues %}
  let value{{forloop.counter}} : {{associatedValue.typeName}}
  {% endfor %}

  {% if not case.associatedValues.count == 0 %}
  init({% for associatedValue in case.associatedValues %}value{{forloop.counter}} : {{associatedValue.typeName}} {% if not forloop.last %},{% endif %}{% endfor %}) {
  {% for associatedValue in case.associatedValues %}
    self.value{{forloop.counter}} = value{{forloop.counter}}
  {% endfor %}
  }
  {% endif %}

  // Create initializer for the associated value
  {% if case.associatedValues.count == 0 %}
  @objc public override init() {}
  {% else %}
  @objc public init(
    {% call initializerParametersForEnumCase case %}
  ) {
  {% for associatedValue in case.associatedValues %}
    self.value{{forloop.counter}} = value{{forloop.counter}}.{{ associatedValue.typeName|lowerFirstWord }}
  {% endfor %}
  }
  {% endif %}
}

{% endfor %}
{% endfor %}
