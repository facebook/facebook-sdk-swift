{# Macro for Enum variable #}
{% macro setupEnum variable %}
  // Computed property for enums
  @objc {{ variable.readAccess }} var {{ variable.name }} : Any{% if variable.isOptional %}?{% endif %} {
    {% if variable.isMutable %}
    get {
    {% endif %}
      {% if variable.isOptional %}
      guard let value = {% if variable.isStatic %}{{ type.name }}{% else %}self.{{ type.name|lowerFirstWord }}{% endif %}.{{ variable.name }} else {
        return nil;
      }
      {% else %}
      let value = {% if variable.isStatic %}{{ type.name }}{% else %}self.{% endif %}{{ type.name|lowerFirstWord }}.{{ variable.name }}
      {% endif %}

      switch value {
      {% for case in variable.type.cases %}
      {% if case.hasAssociatedValue %}
      case .{{  case.name  }}({% for associatedValue in case.associatedValues %}let value{{ forloop.counter }}{% endfor %}):
        return _ObjC{{ variable.type.name }}{{ case.name|capitalize }}(
          {% for associatedValue in case.associatedValues %}
          value{{ forloop.counter }}: value{{ forloop.counter }}{% if not forloop.last %},{% endif %}
          {% endfor %}
        )
      {% else %}
      case .{{  case.name  }}:
        return _ObjC{{ variable.type.name }}{{ case.name|capitalize }}()
      {% endif %}
      {% if not forloop.last %}

      {% endif %}
      {% endfor %}
      }
    {% if variable.isMutable %}
    }
    {% endif %}
    {% if variable.isMutable %}
    set {
      {% for case in variable.type.cases %}
      if {% if case.hasAssociatedValue %}let caseValue = newValue as? _ObjC{{ variable.type.name }}{{ case.name|capitalize }}{% else %}newValue as? _ObjC{{ variable.type.name }}{{ case.name|capitalize }} != nil{% endif %}  {
        {% if not case.hasAssociatedValue %}
        self.{{ type.name|lowerFirstWord }}.{{ variable.name }} = .{{ case.name }}
        {% else %}
        self.{{ type.name|lowerFirstWord }}.{{ variable.name }} = .{{ case.name }}({% for associatedValue in case.associatedValues %}{% if associatedValue.localName == nil %}caseValue.value{{ forloop.counter }}{% else %}{{ associatedValue.localName }}: caseValue.value{{ forloop.counter }}{% endif %}{% endfor %})
        {% endif %}
      }
      {% endfor %}
    }
    {% endif %}
  }
{% endmacro %}
{# #}
{# Macro for Enum variable #}
{% macro setupEnumArray variable %}
  {#  #}
  {% set itemName %}{{ variable.typeName.array.elementTypeName }}{% endset %}
  {% set backingProperty %}{% if variable.isStatic %}{{ type.name }}{% else %}self.{{ type.name|lowerFirstWord }}{% endif %}.{{ variable.name }}{% endset %}
  {% macro objcType case %}_ObjC{{ itemName }}{{ case.name|capitalize }}{% endmacro %}
  {#  #}
  // Computed property for Array of enums
  @objc {{ variable.readAccess }} var {{ variable.name }} : Any{% if variable.isOptional %}?{% endif %} {
    {% if variable.isMutable %}
    get {
    {% endif %}
      {% if variable.isOptional %}
      guard let value = {{backingProperty}} else {
        return nil;
      }
      {% else %}
      let values = {{backingProperty}}
      {% endif %}

      return values.map { value -> Any in
        switch value {
        {% for case in variable.typeName.array.elementType.cases %}
        {% if case.hasAssociatedValue %}
        case .{{  case.name  }}({% for associatedValue in case.associatedValues %}let value{{ forloop.counter }}{% endfor %}):
          return {% call objcType case %}(
            {% for associatedValue in case.associatedValues %}
            value{{ forloop.counter }}: value{{ forloop.counter }}{% if not forloop.last %},{% endif %}
            {% endfor %}
          )
        {% else %}
        case .{{  case.name  }}:
          return {% call objcType case %}()
        {% endif %}
        {% if not forloop.last %}

        {% endif %}
        {% endfor %}
        }
      } as Any
    {% if variable.isMutable %}
    }
    {% endif %}
    {% if variable.isMutable %}
    set {
      var backingValues = [{{itemName}}]()

      guard let newValues = newValue as? [AnyObject] else {
        return assertionFailure("Must be able to cast any into array of objects")
      }

      newValues.forEach { value in
      {% for case in variable.typeName.array.elementType.cases %}

        if {% if case.hasAssociatedValue %}let caseValue = value as? {% call objcType case %}{% else %}value as? {% call objcType case %} != nil{% endif %}  {
          {% if not case.hasAssociatedValue %}
          backingValues.append(.{{ case.name }})
          {% else %}
          backingValues.append(.{{ case.name }}({% for associatedValue in case.associatedValues %}{% if associatedValue.localName == nil %}caseValue.value{{ forloop.counter }}{% else %}{{ associatedValue.localName }}: caseValue.value{{ forloop.counter }}{% endif %}{% endfor %}))
          {% endif %}
        }
      {% endfor %}
      }
      self.{{ type.name|lowerFirstWord }}.{{ variable.name }} = backingValues
    }
    {% endif %}
  }
{% endmacro %}
{#  #}
{# Macro for setting up custom types (structs and classes) #}
{% macro setupCustomType variable %}
  // Forwarding to custom type
  @objc {{ variable.readAccess }} var {{ variable.name }} : _ObjC{{ variable.type.name }} {
    {% if variable.isMutable %}
    get {
    {% endif %}
    {% if variable.isOptional %}
      guard let value = self.{{ type.name|lowerFirstWord }}.{{ variable.name }} else {
          return nil;
      }
    {% else %}
      let value = {% if variable.isStatic %}{{ type.name }}{% else %}self.{{ type.name|lowerFirstWord }}{% endif %}.{{ variable.name }}
    {% endif %}
      return _ObjC{{ variable.type.name }}({{ variable.type.name|lowerFirstWord }}: value)
    {% if variable.isMutable %}
    }
    {% endif %}

    {% if variable.isMutable %}
    set {
      {% if variable.isStatic %}{{ type.name }}{% else %}self.{{ type.name|lowerFirstWord }}{% endif %}.{{ variable.name }} = newValue.{{ variable.type.name|lowerFirstWord }}
    }
    {% endif %}
  }
{% endmacro %}
{#  #}
{# Macro for setting up native types (Int, String, etc...) #}
{% macro setupNativeType variable %}
  // Forwarding property for native type
  @objc {{ variable.readAccess }} {% if variable.isStatic %}static {% endif %}var {{ variable.name }} : {{ variable.typeName }} {
  {% if not variable.isMutable %}
    return {% if variable.isStatic %}{{ type.name }}{% else %}self.{{ type.name|lowerFirstWord }}{% endif %}.{{ variable.name }}
  {% else %}
    get {
      return {% if variable.isStatic %}{{ type.name }}{% else %}self.{{ type.name|lowerFirstWord }}{% endif %}.{{ variable.name }}
    }
    set {
      {% if variable.isStatic %}{{ type.name }}{% else %}self.{{ type.name|lowerFirstWord }}{% endif %}.{{ variable.name }} = newValue
    }
  {% endif %}
  }
{% endmacro %}
{#  #}
{# Macro for setting up variables #}
{% macro setupVariables type %}
  {% for variable in type.variables %}

    {# --- #}
    {% set isClass %}{% call isClass variable %}{% endset %}
    {% set isEnum %}{% call isEnum variable %}{% endset %}
    {% set isEnumArray %}{% call isEnumArray variable %}{% endset %}
    {% set isCustomType %}{% call isCustomType variable %}{% endset %}
    {# --- #}
  {% if not variable.readAccess == "private"%}
  {% if isEnum %}
    {% call setupEnum variable %}
  {% elif isEnumArray %}
    {% call setupEnumArray variable %}
  {% elif isCustomType %}
    {% call setupCustomType variable %}
  {% else %}
    {% call setupNativeType variable %}
  {% endif %}
  {% endif %}
  {% endfor %}
{% endmacro %}
{% call setupVariables type %}
