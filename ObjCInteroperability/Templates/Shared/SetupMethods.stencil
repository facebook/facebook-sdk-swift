{% macro methodParameterForEnum %}
    {% if parameter.argumentLabel %}{% if not parameter.argumentLabel == parameter.name %}{{ parameter.argumentLabel }} {% endif %}{% else %}_ {% endif %}{% call enumParameterForInitializer parameter %}
{% endmacro %}
{# --- #}
{% macro methodParameterForEnumArray %}
    {% if parameter.argumentLabel %}{% if not parameter.argumentLabel == parameter.name %}{{ parameter.argumentLabel }} {% endif %}{% else %}_ {% endif %}{% call enumArrayParameterForInitializer parameter %}
{% endmacro %}
{# --- #}
{% macro methodParameterForCustomType %}
    {% if parameter.argumentLabel %}{% if not parameter.argumentLabel == parameter.name %}{{ parameter.argumentLabel }} {% endif %}{% else %}_ {% endif %}{% call classOrStructParameterForInitializer parameter %}
{% endmacro %}
{# --- #}
{% macro methodParameterForNativeType %}
    {% if parameter.argumentLabel %}{% if not parameter.argumentLabel == parameter.name %}{{ parameter.argumentLabel }} {% endif %}{% else %}_ {% endif %}{{ parameter.name }}: {{ parameter.typeName }}{% if not forloop.last %},{% endif %}
{% endmacro %}
{# --- #}
{% macro isEqualityOverload %}{% if method.shortName == "==" %}true{% endif %}{% endmacro %}
{# --- #}
{#  #}
{# Macro for Method Parameters #}
{% macro setupParameters %}
  {% for parameter in method.parameters %}
  {# --- #}
  {% set isClass %}{% call isClass parameter %}{% endset %}
  {% set isEnum %}{% call isEnum parameter %}{% endset %}
  {% set isEnumArray %}{% call isEnumArray parameter %}{% endset %}
  {% set isCustomType %}{% call isCustomType parameter %}{% endset %}
  {# --- #}
  {% if isEnum %}
    {% call methodParameterForEnum %}
  {% elif isEnumArray %}
    {% call methodParameterForEnumArray %}
  {% elif isCustomType %}
    {% call methodParameterForCustomType %}
  {% elif not isStatic and not isComputed %}
    {% call methodParameterForNativeType %}
  {% endif %}
  {% endfor %}
{% endmacro %}
{#  #}
{# Macro for Return Type #}
{% macro setupReturnType %}
  {# --- #}
  {% set isClass %}{% call isClass method.returnType %}{% endset %}
  {% set isEnum %}{% call isEnum method.returnType %}{% endset %}
  {% set isEnumArray %}{% call isEnumArray method.returnType %}{% endset %}
  {% set isCustomType %}{% call isCustomType method.returnType %}{% endset %}
  {# --- #}
  {% if isEnumArray %}
    ) -> _ObjC{{ method.returnTypeName }} {
  {% elif isCustomType
    or isEnum %}
    ) -> _ObjC{{ method.returnTypeName }} {
  {% elif not isStatic and not isComputed %}
    ) -> {{ method.returnTypeName }} {
  {% endif %}
{% endmacro %}
{{ method.returnTypeName }}

{#  #}
{# Macro for calling backing method #}
{% macro returnInvokedBackingMethod %}
  {#  #}
  {% set targetName %}{% if method.isStatic %}{{ type.name }}{% else %}self.{{ type.name|lowerFirstWord }}{% endif %}{% endset %}
  {% set isEnumReturnType %}{% call isEnum method.returnType %}{% endset %}
  {% set isCustomReturnType %}{% call isCustomType method.returnType %}{% endset %}
  {% set invokedMethod %}{{ targetName }}.{{ method.shortName }}(
    {% for parameter in method.parameters %}
      {# --- #}
      {% set isClass %}{% call isClass parameter.type %}{% endset %}
      {% set isEnum %}{% call isEnum parameter.type %}{% endset %}
      {% set isEnumArray %}{% call isEnumArray parameter.type %}{% endset %}
      {% set isCustomType %}{% call isCustomType parameter.type %}{% endset %}
      {# --- #}
      {% if isCustomType %}
        {% if parameter.argumentLabel %}{{ parameter.argumentLabel }}: {% endif %}{{ parameter.name }}.{{ parameter.type.name|lowerFirstWord }}{% if not forloop.last %},{% endif %}
      {% elif isEnum %}
        {% if parameter.argumentLabel %}{{ parameter.argumentLabel }}: {% endif %}{{ parameter.name }}.{{ parameter.type.name|lowerFirstWord }}{% if not forloop.last %},{% endif %}
      {% else %}
        {% if parameter.argumentLabel %}{{ parameter.argumentLabel }}: {% endif %}{{ parameter.name }}{% if not forloop.last %},{% endif %}
      {% endif %}
    {% endfor %}
    )
  {% endset %}
  {#  #}
  {% if isCustomReturnType %}
    let backingType = {{ invokedMethod }}
    {# {{ method.returnType.name }} #}
    return _ObjC{{ method.returnType.name }}(
      {% if isEnumReturnType %}
        caseValue: backingType as Any
      {% else %}
        {{ method.returnType.name|lowerFirstWord }}: backingType
      {% endif %}
    )
  {% else %}
    return {{ invokedMethod }}
  {% endif %}
{% endmacro %}
{#  #}
{# Macro for ObjC Method Forwarding #}
{% macro setupMethods type %}
  {# For public methods that are not initializers #}
  {% for method in type.methods where method.accessLevel == "public"
    and not method.isInitializer
    and not method.isGeneric
    or method|annotated:"exposeInternal" %}
    {# --- #}
    {# --- #}
  {% if method.shortName == "== " %}
  // Equatable passthrough
  @objc {{ method.accessLevel }} override func isEqual(_ object: Any?) -> Bool {
    guard let object = object as? _ObjC{{ type.name }} else {
      return false
    }
    return {{ type.name|lowerFirstWord }} == object.{{ type.name|lowerFirstWord }}
  }
  {% elif method.shortName == "< "
    or method.shortName == "> "
    or method.shortName == "<= "
    or method.shortName == ">= "
    %}
  // Comparable passthrough
  @objc public func compare(_ object: _ObjC{{ type.name }}) -> ComparisonResult {
    if {{ type.name|lowerFirstWord }} == object.{{ type.name|lowerFirstWord }} {
      return .orderedSame
    } else if {{ type.name|lowerFirstWord }} < object.{{ type.name|lowerFirstWord }} {
      return .orderedAscending
    } else {
      return .orderedDescending
    }
  }
  {% else %}
  @objc {{ method.accessLevel }} {% if method.isStatic %}static {% endif %}func {{ method.callName }}(
    {% call setupParameters %}
    {% call setupReturnType %}
    {% call returnInvokedBackingMethod %}
  }
  {% endif %}
  {% endfor %}
{% endmacro %}
{#  #}
{% call setupMethods type %}
