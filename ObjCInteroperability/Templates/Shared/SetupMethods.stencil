{% macro methodParameterForEnum %}
    // Enum method parameter
    {% if parameter.argumentLabel %}{% if not parameter.argumentLabel == parameter.name %}{{ parameter.argumentLabel }} {% endif %}{% else %}_ {% endif %}{% call enumParameterForInitializer parameter %}
{% endmacro %}
{# --- #}
{% macro methodParameterForEnumArray %}
    // Enum array method parameter
    {% if parameter.argumentLabel %}{% if not parameter.argumentLabel == parameter.name %}{{ parameter.argumentLabel }} {% endif %}{% else %}_ {% endif %}{% call enumArrayParameterForInitializer parameter %}
{% endmacro %}
{# --- #}
{% macro methodParameterForCustomType %}
    // Custom Type parameter
    {% if parameter.argumentLabel %}{% if not parameter.argumentLabel == parameter.name %}{{ parameter.argumentLabel }} {% endif %}{% else %}_ {% endif %}{% call classOrStructParameterForInitializer parameter %}
{% endmacro %}
{# --- #}
{% macro methodParameterForClosure %}
      {% if parameter.argumentLabel %}{% if not parameter.argumentLabel == parameter.name %}{{ parameter.argumentLabel }} {% endif %}{% else %}_ {% endif %}{{ parameter.name }}:
        (
      {% for closureParameter in parameter.typeName.closure.parameters %}
        {% for genericClosureParameter in closureParameter.typeName.generic.typeParameters %}
          {{ genericClosureParameter.typeName }}?{% if not forloop.last %},{% endif %}
        {% endfor %}
        ) -> {{ parameter.typeName.closure.returnTypeName }}
      {% endfor %}
{% endmacro %}
{# --- #}
{% macro methodParameterForNativeType %}
    {% if parameter.typeName.isClosure %}
      {% call methodParameterForClosure %}
    {% else %}
      {% if parameter.argumentLabel %}{% if not parameter.argumentLabel == parameter.name %}{{ parameter.argumentLabel }} {% endif %}{% else %}_ {% endif %}{{ parameter.name }}: {% if parameter.actualTypeName %}{{ parameter.actualTypeName }}{% else %}{{ parameter.typeName.typeName }}{% endif %}{% if not forloop.last %},{% endif %}
    {% endif %}
{% endmacro %}
{# --- #}
{% macro backingMethodParameterForCustomType %}
      {% if parameter.argumentLabel %}{{ parameter.argumentLabel }}: {% endif %}{{ parameter.name }}.{{ parameter.type.name|lowerFirstWord }}{% if not forloop.last %},{% endif %}
{% endmacro %}
{# --- #}
{% macro backingMethodParameterForEnum %}
      {% if parameter.argumentLabel %}{{ parameter.argumentLabel }}: {% endif %}{{ parameter.name }}.{{ parameter.type.name|lowerFirstWord }}{% if not forloop.last %},{% endif %}
{% endmacro %}
{# --- #}
{% macro backingMethodParameterForClosure %}
      // check if it's last?
      {% if parameter.argumentLabel %}{{ parameter.argumentLabel }}: {% endif %}{ result in
        // This is making the large assumption that a closure will be a Swift.Result type that takes two generic types
        switch result {
        case .success(let value):
          completionHandler(value, nil)
        case .failure(let error):
          completionHandler(nil, error)
        }
      }
{% endmacro %}
{# --- #}
{% macro backingMethodParameterForNativeType %}
      {% if parameter.argumentLabel %}{{ parameter.argumentLabel }}: {% endif %}{{ parameter.name }}{% if not forloop.last %},{% endif %}
{% endmacro %}
{# --- #}
{% macro isEqualityOverload %}{% if method.shortName == "==" %}true{% endif %}{% endmacro %}
{# --- #}
{#  #}
{# Macro for Method Parameters #}
{% macro setupParameters %}
  {% for parameter in method.parameters %}
  {# --- #}
  {% set isClass %}{% call isClass parameter %}{% endset %}
  {% set isEnum %}{% call isEnum parameter %}{% endset %}
  {% set isEnumArray %}{% call isEnumArray parameter %}{% endset %}
  {% set isCustomType %}{% call isCustomType parameter %}{% endset %}
  {% set isClosureType %}{% call isClosureType parameter %}{% endset %}
  {# --- #}
  {% if isEnum %}
    {% call methodParameterForEnum %}
  {% elif isEnumArray %}
    {% call methodParameterForEnumArray %}
  {% elif isCustomType %}
    {% call methodParameterForCustomType %}
  {% elif isClosureType %}
    {% call methodParameterForClosure %}
  {% elif not isStatic and not isComputed %}
    {% call methodParameterForNativeType %}
  {% endif %}
  {% endfor %}
{% endmacro %}
{#  #}
{# Macro for Return Type #}
{% macro setupReturnType %}
  {# --- #}
  {% set isClass %}{% call isClass method.returnType %}{% endset %}
  {% set isEnum %}{% call isEnum method.returnType %}{% endset %}
  {% set isEnumArray %}{% call isEnumArray method.returnType %}{% endset %}
  {% set isCustomType %}{% call isCustomType method.returnType %}{% endset %}
  {# --- #}
  {% if isEnumArray %}
    ) -> _ObjC{{ method.returnTypeName }} {
  {% elif isCustomType
    or isEnum %}
    ) -> _ObjC{{ method.returnTypeName }} {
  {% elif not isStatic and not isComputed %}
    ) -> {{ method.returnTypeName }} {
  {% endif %}
{% endmacro %}
{{ method.returnTypeName }}

{#  #}
{# Macro for calling backing method #}
{% macro returnInvokedBackingMethod %}
  {#  #}
  {% set targetName %}{% if method.isStatic %}{{ type.name }}{% else %}self.{{ type.name|lowerFirstWord }}{% endif %}{% endset %}
  {% set isEnumReturnType %}{% call isEnum method.returnType %}{% endset %}
  {% set isCustomReturnType %}{% call isCustomType method.returnType %}{% endset %}
  {% set invokedMethod %}{{ targetName }}.{{ method.shortName }}(
    {% for parameter in method.parameters %}
      {# --- #}
      {% set isClass %}{% call isClass parameter.type %}{% endset %}
      {% set isEnum %}{% call isEnum parameter.type %}{% endset %}
      {% set isEnumArray %}{% call isEnumArray parameter.type %}{% endset %}
      {% set isCustomType %}{% call isCustomType parameter.type %}{% endset %}
      {# --- #}
      {% if isCustomType %}{% call backingMethodParameterForCustomType %}
      {% elif isEnum %}{% call backingMethodParameterForEnum %}
      {% elif parameter.typeName.isClosure %}{% call backingMethodParameterForClosure %}
      {% else %}{% call backingMethodParameterForNativeType %}
      {% endif %}
    {% endfor %}
    )
  {% endset %}
  {#  #}
  {% if isCustomReturnType %}
    let backingType = {{ invokedMethod }}
    {# {{ method.returnType.name }} #}
    return _ObjC{{ method.returnType.name }}(
      {% if isEnumReturnType %}
        caseValue: backingType as Any
      {% else %}
        {{ method.returnType.name|lowerFirstWord }}: backingType
      {% endif %}
    )
  {% else %}
    return {{ invokedMethod }}
  {% endif %}
{% endmacro %}
{#  #}
{# Macro for ObjC Method Forwarding #}
{% macro setupMethods type %}
  {# For public methods that are not initializers #}
  {% for method in type.methods where method.accessLevel == "public"
    and not method.isInitializer
    and not method.isGeneric
    and not method.shortName == "== "
    and not method.shortName == "< "
    and not method.shortName == "> "
    and not method.shortName == "<= "
    and not method.shortName == ">= "
    or method|annotated:"exposeInternal"
  %}
  @objc public {% if method.isStatic %}static {% endif %}func {{ method.callName }}(
    {% call setupParameters %}
    {% call setupReturnType %}
    {% call returnInvokedBackingMethod %}
  }
  {% endfor %}
{% endmacro %}
{#  #}
{% call setupMethods type %}
