// Generated using Sourcery 0.16.0 â€” https://github.com/krzysztofzablocki/Sourcery
// DO NOT EDIT


  // sourcery:file:Generated/Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = public, name = Employee, isGeneric = false, localName = Employee, variables = [Variable: name = classification, typeName = EmployeeClassification, isComputed = false, isStatic = false, readAccess = public, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Employee), actualDefinedInTypeName = Optional(Employee)], methods = [Method: name = == (lhs: Employee, rhs: Employee), selectorName = ==(_:_:), parameters = [MethodParameter: argumentLabel = nil, name = lhs, typeName = Employee, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = nil, name = rhs, typeName = Employee, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:]], returnTypeName = Bool, `throws` = false, `rethrows` = false, accessLevel = public, isStatic = true, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(Employee), attributes = ["public": public], Method: name = init(classification: EmployeeClassification), selectorName = init(classification:), parameters = [MethodParameter: argumentLabel = Optional("classification"), name = classification, typeName = EmployeeClassification, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:]], returnTypeName = Employee, `throws` = false, `rethrows` = false, accessLevel = public, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(Employee), attributes = ["public": public]], subscripts = [], initializers = [Method: name = init(classification: EmployeeClassification), selectorName = init(classification:), parameters = [MethodParameter: argumentLabel = Optional("classification"), name = classification, typeName = EmployeeClassification, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:]], returnTypeName = Employee, `throws` = false, `rethrows` = false, accessLevel = public, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(Employee), attributes = ["public": public]], annotations = [:], staticVariables = [], staticMethods = [Method: name = == (lhs: Employee, rhs: Employee), selectorName = ==(_:_:), parameters = [MethodParameter: argumentLabel = nil, name = lhs, typeName = Employee, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = nil, name = rhs, typeName = Employee, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:]], returnTypeName = Bool, `throws` = false, `rethrows` = false, accessLevel = public, isStatic = true, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(Employee), attributes = ["public": public]], classMethods = [], instanceVariables = [Variable: name = classification, typeName = EmployeeClassification, isComputed = false, isStatic = false, readAccess = public, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Employee), actualDefinedInTypeName = Optional(Employee)], instanceMethods = [Method: name = init(classification: EmployeeClassification), selectorName = init(classification:), parameters = [MethodParameter: argumentLabel = Optional("classification"), name = classification, typeName = EmployeeClassification, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:]], returnTypeName = Employee, `throws` = false, `rethrows` = false, accessLevel = public, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(Employee), attributes = ["public": public]], computedVariables = [], storedVariables = [Variable: name = classification, typeName = EmployeeClassification, isComputed = false, isStatic = false, readAccess = public, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Employee), actualDefinedInTypeName = Optional(Employee)], inheritedTypes = ["Equatable", "ObjCBridgeable"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["public": public], kind = class, isFinal = false+TemplateName
  // sourcery:end
  // sourcery:file:Generated/Enum: module = nil, typealiases = [:], isExtension = false, kind = enum, accessLevel = public, name = EmployeeClassification, isGeneric = false, localName = EmployeeClassification, variables = [], methods = [], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [], computedVariables = [], storedVariables = [], inheritedTypes = ["ObjCBridgeable"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["public": public], cases = [EnumCase: name = manager, rawValue = nil, associatedValues = [], annotations = [:], hasAssociatedValue = false, EnumCase: name = contributor, rawValue = nil, associatedValues = [], annotations = [:], hasAssociatedValue = false], rawTypeName = Optional(Equatable), hasAssociatedValues = false+TemplateName
  // sourcery:end
  // sourcery:file:Generated/Enum: module = nil, typealiases = [:], isExtension = false, kind = enum, accessLevel = public, name = EmployeePayroll, isGeneric = false, localName = EmployeePayroll, variables = [], methods = [], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [], computedVariables = [], storedVariables = [], inheritedTypes = ["ObjCBridgeable"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["public": public], cases = [EnumCase: name = hourly, rawValue = nil, associatedValues = [AssociatedValue: localName = Optional("for"), externalName = nil, typeName = EmployeeClassification, annotations = [:]], annotations = [:], hasAssociatedValue = true, EnumCase: name = salary, rawValue = nil, associatedValues = [AssociatedValue: localName = Optional("for"), externalName = nil, typeName = EmployeeClassification, annotations = [:]], annotations = [:], hasAssociatedValue = true, EnumCase: name = terminated, rawValue = nil, associatedValues = [], annotations = [:], hasAssociatedValue = false], rawTypeName = Optional(Equatable), hasAssociatedValues = true+TemplateName
  // sourcery:end
  // sourcery:file:Generated/Struct: module = nil, typealiases = [:], isExtension = false, kind = struct, accessLevel = public, name = Restaurant, isGeneric = false, localName = Restaurant, variables = [Variable: name = soup, typeName = String, isComputed = true, isStatic = true, readAccess = public, writeAccess = , isMutable = false, defaultValue = Optional("\"Clam Chowder\""), annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = bread, typeName = String, isComputed = false, isStatic = true, readAccess = public, writeAccess = public, isMutable = true, defaultValue = Optional("\"Sourdough\""), annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = name, typeName = String, isComputed = false, isStatic = false, readAccess = public, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = specials, typeName = [String], isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = regularMenu, typeName = [String], isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = Optional("[\"Sandwiches\"]"), annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = orderTimestamp, typeName = Date, isComputed = true, isStatic = false, readAccess = public, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = employee, typeName = Employee, isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = payrollEntry, typeName = EmployeePayroll, isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = payroll, typeName = [EmployeePayroll], isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = registerCode, typeName = String, isComputed = false, isStatic = false, readAccess = private, writeAccess = private, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["private": private], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = bathroomCode, typeName = String, isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = uniformColors, typeName = UniformColors, isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant)], methods = [Method: name = init(    name: String,    specials: [String],    regularMenu: [String],    employee: Employee,    payrollEntry: EmployeePayroll,    payroll: [EmployeePayroll],    bathroomCode: String,    uniformColors: UniformColors    ), selectorName = init(name:specials:regularMenu:employee:payrollEntry:payroll:bathroomCode:uniformColors:), parameters = [MethodParameter: argumentLabel = Optional("name"), name = name, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("specials"), name = specials, typeName = [String], `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("regularMenu"), name = regularMenu, typeName = [String], `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("employee"), name = employee, typeName = Employee, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("payrollEntry"), name = payrollEntry, typeName = EmployeePayroll, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("payroll"), name = payroll, typeName = [EmployeePayroll], `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("bathroomCode"), name = bathroomCode, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("uniformColors"), name = uniformColors, typeName = UniformColors, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:]], returnTypeName = Restaurant, `throws` = false, `rethrows` = false, accessLevel = public, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(Restaurant), attributes = ["public": public], Method: name = init(    name: String,    specials: [String],    regularMenu: [String],    employee: Employee,    payrollEntry: EmployeePayroll,    payroll: [EmployeePayroll],    registerCode: String,    bathroomCode: String,    uniformColors: UniformColors    ), selectorName = init(name:specials:regularMenu:employee:payrollEntry:payroll:registerCode:bathroomCode:uniformColors:), parameters = [MethodParameter: argumentLabel = Optional("name"), name = name, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("specials"), name = specials, typeName = [String], `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("regularMenu"), name = regularMenu, typeName = [String], `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("employee"), name = employee, typeName = Employee, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("payrollEntry"), name = payrollEntry, typeName = EmployeePayroll, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("payroll"), name = payroll, typeName = [EmployeePayroll], `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("registerCode"), name = registerCode, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("bathroomCode"), name = bathroomCode, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("uniformColors"), name = uniformColors, typeName = UniformColors, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:]], returnTypeName = Restaurant, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(Restaurant), attributes = [:]], subscripts = [], initializers = [Method: name = init(    name: String,    specials: [String],    regularMenu: [String],    employee: Employee,    payrollEntry: EmployeePayroll,    payroll: [EmployeePayroll],    bathroomCode: String,    uniformColors: UniformColors    ), selectorName = init(name:specials:regularMenu:employee:payrollEntry:payroll:bathroomCode:uniformColors:), parameters = [MethodParameter: argumentLabel = Optional("name"), name = name, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("specials"), name = specials, typeName = [String], `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("regularMenu"), name = regularMenu, typeName = [String], `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("employee"), name = employee, typeName = Employee, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("payrollEntry"), name = payrollEntry, typeName = EmployeePayroll, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("payroll"), name = payroll, typeName = [EmployeePayroll], `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("bathroomCode"), name = bathroomCode, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("uniformColors"), name = uniformColors, typeName = UniformColors, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:]], returnTypeName = Restaurant, `throws` = false, `rethrows` = false, accessLevel = public, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(Restaurant), attributes = ["public": public], Method: name = init(    name: String,    specials: [String],    regularMenu: [String],    employee: Employee,    payrollEntry: EmployeePayroll,    payroll: [EmployeePayroll],    registerCode: String,    bathroomCode: String,    uniformColors: UniformColors    ), selectorName = init(name:specials:regularMenu:employee:payrollEntry:payroll:registerCode:bathroomCode:uniformColors:), parameters = [MethodParameter: argumentLabel = Optional("name"), name = name, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("specials"), name = specials, typeName = [String], `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("regularMenu"), name = regularMenu, typeName = [String], `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("employee"), name = employee, typeName = Employee, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("payrollEntry"), name = payrollEntry, typeName = EmployeePayroll, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("payroll"), name = payroll, typeName = [EmployeePayroll], `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("registerCode"), name = registerCode, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("bathroomCode"), name = bathroomCode, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("uniformColors"), name = uniformColors, typeName = UniformColors, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:]], returnTypeName = Restaurant, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(Restaurant), attributes = [:]], annotations = [:], staticVariables = [Variable: name = soup, typeName = String, isComputed = true, isStatic = true, readAccess = public, writeAccess = , isMutable = false, defaultValue = Optional("\"Clam Chowder\""), annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = bread, typeName = String, isComputed = false, isStatic = true, readAccess = public, writeAccess = public, isMutable = true, defaultValue = Optional("\"Sourdough\""), annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant)], staticMethods = [], classMethods = [], instanceVariables = [Variable: name = name, typeName = String, isComputed = false, isStatic = false, readAccess = public, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = specials, typeName = [String], isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = regularMenu, typeName = [String], isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = Optional("[\"Sandwiches\"]"), annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = orderTimestamp, typeName = Date, isComputed = true, isStatic = false, readAccess = public, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = employee, typeName = Employee, isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = payrollEntry, typeName = EmployeePayroll, isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = payroll, typeName = [EmployeePayroll], isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = registerCode, typeName = String, isComputed = false, isStatic = false, readAccess = private, writeAccess = private, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["private": private], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = bathroomCode, typeName = String, isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = uniformColors, typeName = UniformColors, isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant)], instanceMethods = [Method: name = init(    name: String,    specials: [String],    regularMenu: [String],    employee: Employee,    payrollEntry: EmployeePayroll,    payroll: [EmployeePayroll],    bathroomCode: String,    uniformColors: UniformColors    ), selectorName = init(name:specials:regularMenu:employee:payrollEntry:payroll:bathroomCode:uniformColors:), parameters = [MethodParameter: argumentLabel = Optional("name"), name = name, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("specials"), name = specials, typeName = [String], `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("regularMenu"), name = regularMenu, typeName = [String], `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("employee"), name = employee, typeName = Employee, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("payrollEntry"), name = payrollEntry, typeName = EmployeePayroll, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("payroll"), name = payroll, typeName = [EmployeePayroll], `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("bathroomCode"), name = bathroomCode, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("uniformColors"), name = uniformColors, typeName = UniformColors, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:]], returnTypeName = Restaurant, `throws` = false, `rethrows` = false, accessLevel = public, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(Restaurant), attributes = ["public": public], Method: name = init(    name: String,    specials: [String],    regularMenu: [String],    employee: Employee,    payrollEntry: EmployeePayroll,    payroll: [EmployeePayroll],    registerCode: String,    bathroomCode: String,    uniformColors: UniformColors    ), selectorName = init(name:specials:regularMenu:employee:payrollEntry:payroll:registerCode:bathroomCode:uniformColors:), parameters = [MethodParameter: argumentLabel = Optional("name"), name = name, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("specials"), name = specials, typeName = [String], `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("regularMenu"), name = regularMenu, typeName = [String], `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("employee"), name = employee, typeName = Employee, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("payrollEntry"), name = payrollEntry, typeName = EmployeePayroll, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("payroll"), name = payroll, typeName = [EmployeePayroll], `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("registerCode"), name = registerCode, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("bathroomCode"), name = bathroomCode, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("uniformColors"), name = uniformColors, typeName = UniformColors, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:]], returnTypeName = Restaurant, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(Restaurant), attributes = [:]], computedVariables = [Variable: name = orderTimestamp, typeName = Date, isComputed = true, isStatic = false, readAccess = public, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant)], storedVariables = [Variable: name = name, typeName = String, isComputed = false, isStatic = false, readAccess = public, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = specials, typeName = [String], isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = regularMenu, typeName = [String], isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = Optional("[\"Sandwiches\"]"), annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = employee, typeName = Employee, isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = payrollEntry, typeName = EmployeePayroll, isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = payroll, typeName = [EmployeePayroll], isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = registerCode, typeName = String, isComputed = false, isStatic = false, readAccess = private, writeAccess = private, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["private": private], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = bathroomCode, typeName = String, isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant), Variable: name = uniformColors, typeName = UniformColors, isComputed = false, isStatic = false, readAccess = public, writeAccess = public, isMutable = true, defaultValue = nil, annotations = [:], attributes = ["public": public], isFinal = false, isLazy = false, definedInTypeName = Optional(Restaurant), actualDefinedInTypeName = Optional(Restaurant)], inheritedTypes = ["Equatable", "ObjCBridgeable"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["public": public], kind = struct+TemplateName
  // sourcery:end
  // sourcery:file:Generated/Struct: module = nil, typealiases = [:], isExtension = false, kind = struct, accessLevel = public, name = UniformColors, isGeneric = false, localName = UniformColors, variables = [Variable: name = hat, typeName = String, isComputed = false, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = Optional("\"red\""), annotations = [:], attributes = [:], isFinal = false, isLazy = false, definedInTypeName = Optional(UniformColors), actualDefinedInTypeName = Optional(UniformColors), Variable: name = shirt, typeName = String, isComputed = false, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = Optional("\"blue\""), annotations = [:], attributes = [:], isFinal = false, isLazy = false, definedInTypeName = Optional(UniformColors), actualDefinedInTypeName = Optional(UniformColors)], methods = [], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [Variable: name = hat, typeName = String, isComputed = false, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = Optional("\"red\""), annotations = [:], attributes = [:], isFinal = false, isLazy = false, definedInTypeName = Optional(UniformColors), actualDefinedInTypeName = Optional(UniformColors), Variable: name = shirt, typeName = String, isComputed = false, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = Optional("\"blue\""), annotations = [:], attributes = [:], isFinal = false, isLazy = false, definedInTypeName = Optional(UniformColors), actualDefinedInTypeName = Optional(UniformColors)], instanceMethods = [], computedVariables = [], storedVariables = [Variable: name = hat, typeName = String, isComputed = false, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = Optional("\"red\""), annotations = [:], attributes = [:], isFinal = false, isLazy = false, definedInTypeName = Optional(UniformColors), actualDefinedInTypeName = Optional(UniformColors), Variable: name = shirt, typeName = String, isComputed = false, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = Optional("\"blue\""), annotations = [:], attributes = [:], isFinal = false, isLazy = false, definedInTypeName = Optional(UniformColors), actualDefinedInTypeName = Optional(UniformColors)], inheritedTypes = ["Equatable", "ObjCBridgeable"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["public": public], kind = struct+TemplateName
  // sourcery:end
