//  Converted to Swift 4 by Swiftify v4.2.38216 - https://objectivec2swift.com/
// Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
//
// You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
// copy, modify, and distribute this software in source code or binary form for use
// in connection with the web services and APIs provided by Facebook.
//
// As with any software that integrates with the Facebook platform, your use of
// this software is subject to the Facebook Developer Principles and Policies
// [http://developers.facebook.com/policy/]. This copyright notice shall be
// included in all copies or substantial portions of the software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import FBSDKCoreKit
import FBSDKShareKit
import Photos
import UIKit

let kFBSDKSharePhotoAssetKey = "photoAsset"
let kFBSDKSharePhotoImageKey = "image"
let kFBSDKSharePhotoImageURLKey = "imageURL"
let kFBSDKSharePhotoUserGeneratedKey = "userGenerated"
let kFBSDKSharePhotoCaptionKey = "caption"

class FBSDKSharePhoto: NSObject, NSSecureCoding, FBSDKCopying, FBSDKShareMedia, FBSDKSharingValidation {
    /**
      Convenience method to build a new photo object with an image.
     @param image If the photo is resident in memory, this method supplies the data
     @param userGenerated Specifies whether the photo represented by the receiver was generated by the user or by the
     application
     */
    convenience init(image: UIImage?, userGenerated: Bool) {
        let photo = self.init()
        photo.image = image
        photo.userGenerated = userGenerated
    }

    /**
      Convenience method to build a new photo object with an imageURL.
     @param imageURL The URL to the photo
     @param userGenerated Specifies whether the photo represented by the receiver was generated by the user or by the
     application
    
     This method should only be used when adding photo content to open graph stories.
      For example, if you're trying to share a photo from the web by itself, download the image and use
      `photoWithImage:userGenerated:` instead.
     */
    convenience init(imageURL: URL?, userGenerated: Bool) {
        let photo = self.init()
        photo.imageURL = imageURL
        photo.userGenerated = userGenerated
    }

    /**
     Convenience method to build a new photo object with a PHAsset.
     - Parameter photoAsset: The PHAsset that represents the photo in the Photos library.
     - Parameter userGenerated: Specifies whether the photo represented by the receiver was generated by the user or by the
     application
     */
    convenience init(photoAsset: PHAsset?, userGenerated: Bool) {
        let photo = self.init()
        photo.photoAsset = photoAsset
        photo.userGenerated = userGenerated
    }

    /**
      If the photo is resident in memory, this method supplies the data.
     @return UIImage representation of the photo
     */

    private var _image: UIImage?
    var image: UIImage? {
        get {
            return _image
        }
        set(image) {
            _image = image
            imageURL = nil
            photoAsset = nil
        }
    }
    /**
      The URL to the photo.
     @return URL that points to a network location or the location of the photo on disk
     */

    private var _imageURL: URL?
    var imageURL: URL? {
        get {
            return _imageURL
        }
        set(imageURL) {
            image = nil
            _imageURL = imageURL?.copy()
            photoAsset = nil
        }
    }
    /**
     The representation of the photo in the Photos library.
     - Returns: PHAsset that represents the photo in the Photos library.
     */

    private var _photoAsset: PHAsset?
    var photoAsset: PHAsset? {
        get {
            return _photoAsset
        }
        set(photoAsset) {
            image = nil
            imageURL = nil
            _photoAsset = photoAsset
        }
    }
    /**
      Specifies whether the photo represented by the receiver was generated by the user or by the application.
     @return YES if the photo is user-generated, otherwise NO
     */
    var userGenerated = false
    /**
     The user generated caption for the photo. Note that the 'caption' must come from
     * the user, as pre-filled content is forbidden by the Platform Policies (2.3).
     @return the Photo's caption if exists else returns null.
     */
    var caption: String?

    /**
      Compares the receiver to another photo.
     @param photo The other photo
     @return YES if the receiver's values are equal to the other photo's values; otherwise NO
     */
    func isEqual(to photo: FBSDKSharePhoto?) -> Bool {
        return photo != nil && (userGenerated == photo?.userGenerated) && FBSDKInternalUtility.object(image, isEqualToObject: photo?.image) && FBSDKInternalUtility.object(imageURL, isEqualToObject: photo?.imageURL) && FBSDKInternalUtility.object(photoAsset, isEqualToObject: photo?.photoAsset) && FBSDKInternalUtility.object(caption, isEqualToObject: photo?.caption)
    }

// MARK: - Class Methods

// MARK: - Properties

// MARK: - Equality
    override var hash: Int {
        let subhashes = [image?._hash, imageURL?._hash, photoAsset?._hash, caption?._hash, (userGenerated ? 1 : 0)]
        return FBSDKMath.hash(withIntegerArray: subhashes, count: MemoryLayout<subhashes>.size / MemoryLayout<subhashes[0]>.size)
    }

    override func isEqual(_ object: Any?) -> Bool {
        if self == (object as? FBSDKSharePhoto) {
            return true
        }
        if !(object is FBSDKSharePhoto) {
            return false
        }
        return isEqual(to: object as? FBSDKSharePhoto)
    }

// MARK: - FBSDKSharingValidation
    @objc func validate(with bridgeOptions: FBSDKShareBridgeOptions) throws {
        var errorRef = errorRef
        if bridgeOptions.rawValue & FBSDKShareBridgeOptionsPhotoImageURL != 0 {
            // a web-based URL is required
            if imageURL != nil {
                if imageURL?.isFileURL != nil {
                    if errorRef != nil {
                        errorRef = Error.fbInvalidArgumentError(with: FBSDKShareErrorDomain, name: "imageURL", value: imageURL, message: "Cannot refer to a local file resource.")
                    }
                    return false
                } else {
                    return true // will bridge the image URL
                }
            } else {
                if errorRef != nil {
                    errorRef = Error.fbInvalidArgumentError(with: FBSDKShareErrorDomain, name: "photo", value: self, message: "imageURL is required.")
                }
                return false
            }
        } else if photoAsset != nil {
            if .image == photoAsset?.mediaType {
                if bridgeOptions.rawValue & FBSDKShareBridgeOptionsPhotoAsset != 0 {
                    return true // will bridge the PHAsset.localIdentifier
                } else {
                    return true // will load the asset and bridge the image
                }
            } else {
                if errorRef != nil {
                    errorRef = Error.fbInvalidArgumentError(with: FBSDKShareErrorDomain, name: "photoAsset", value: photoAsset, message: "Must refer to a photo or other static image.")
                }
                return false
            }
        } else if imageURL != nil {
            if imageURL?.isFileURL != nil {
                return true // will load the contents of the file and bridge the image
            } else {
                if errorRef != nil {
                    errorRef = Error.fbInvalidArgumentError(with: FBSDKShareErrorDomain, name: "imageURL", value: imageURL, message: "Must refer to a local file resource.")
                }
                return false
            }
        } else if image != nil {
            return true // will bridge the image
        } else {
            if errorRef != nil {
                errorRef = Error.fbInvalidArgumentError(with: FBSDKShareErrorDomain, name: "photo", value: self, message: "Must have an asset, image, or imageURL value.")
            }
            return false
        }
    }

// MARK: - NSCoding
    class var supportsSecureCoding: Bool {
        return true
    }

    required init?(coder decoder: NSCoder) {
        //if self.init()
        image = decoder.decodeObjectOfClass(UIImage.self, forKey: kFBSDKSharePhotoImageKey) as? UIImage
        imageURL = decoder.decodeObjectOfClass(URL.self, forKey: kFBSDKSharePhotoImageURLKey) as? URL
        let localIdentifier = decoder.decodeObjectOfClass(String.self, forKey: kFBSDKSharePhotoAssetKey) as? String
        if localIdentifier != nil && (.authorized == PHPhotoLibrary.authorizationStatus()) {
            photoAsset = PHAsset.fetchAssets(withLocalIdentifiers: [localIdentifier], options: nil).firstObject
        }
        userGenerated = decoder.decodeBool(forKey: kFBSDKSharePhotoUserGeneratedKey)
        caption = decoder.decodeObjectOfClass(String.self, forKey: kFBSDKSharePhotoCaptionKey) as? String
    }

    func encode(with encoder: NSCoder) {
        encoder.encode(image, forKey: kFBSDKSharePhotoImageKey)
        encoder.encode(imageURL, forKey: kFBSDKSharePhotoImageURLKey)
        encoder.encode(photoAsset?.localIdentifier, forKey: kFBSDKSharePhotoAssetKey)
        encoder.encode(userGenerated, forKey: kFBSDKSharePhotoUserGeneratedKey)
        encoder.encode(caption, forKey: kFBSDKSharePhotoCaptionKey)
    }

// MARK: - NSCopying
    func copy(with zone: NSZone?) -> Any? {
        let copy = FBSDKSharePhoto()
        copy.image = image
        copy.imageURL = imageURL?.copy()
        copy.photoAsset = photoAsset
        copy.userGenerated = userGenerated
        copy.caption = caption
        return copy
    }
}