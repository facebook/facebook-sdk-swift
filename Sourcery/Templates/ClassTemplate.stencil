import Foundation

{% for type in types.implementing.ObjCBridgeable|class %}

@objc(FB{{ type.name }})
{{ type.accessLevel }} class _ObjC{{ type.name }} : NSObject {
  private (set) var {{ type.name|lowerFirstWord }}: {{ type.name }}

  // Initializer to be used from Swift code
  {{ type.accessLevel }} init({{ type.name|lowerFirstWord }}: {{ type.name }}) {
    self.{{ type.name|lowerFirstWord }} = {{ type.name|lowerFirstWord }}
  }

  // Initializer to be used from ObjC code
  @objc {% if type.variables.count == 0  %}override {% endif %}{{ type.accessLevel }} init({% for variable in type.variables %}
  {% if variable.type.kind == "enum" %}
    {{ variable.name }}: Any{% if variable.isOptional %}?{% endif %}{% if not forloop.last %}, {% endif %}
  {% elif not variable.isStatic and not variable.isComputed %}
    {{ variable.name }}: {{ variable.typeName }} {% if variable.defaultValue != nil %}= {{ variable.defaultValue }}{% endif %}{% if not forloop.last %}, {% endif %}
  {% endif %}
  {% endfor %}) {
    {% for variable in type.variables %}
    {% if variable.type.kind == "enum" %}
    // Unwrapping of enumeration
    guard let enumeration{{ forloop.counter }} = {{ variable.name }} as? _ObjC{{ variable.type.name }} else {
      preconditionFailure("Type of enumeration not valid for {{ variable.name }}")
    }
    {% endif %}
    {% endfor %}
    let {{ type.name|lowerFirstWord }} = {{ type.name }}(
    {% for variable in type.variables %}
    {% if variable.type.kind == "enum" %}
      {{ variable.name }}: enumeration{{ forloop.counter }}.{{ variable.type.name|lowerFirstWord }}{% if not forloop.last %},{% endif %}
    {% elif not variable.isStatic and not variable.isComputed %}
      {{ variable.name }}: {{ variable.name }}{% if not forloop.last %},{% endif %}
    {% endif %}
    {% endfor %})
    self.{{ type.name|lowerFirstWord }} = {{ type.name|lowerFirstWord }}
  }
  {% for variable in type.variables %}
  {% if variable.type.kind == "enum" %}

  // Computed property for enums
  {{ variable.readAccess }} var {{ variable.name }} : Any{% if variable.isOptional %}?{% endif %} {
    {% if variable.isMutable %}
    get {
    {% endif %}
      {% if variable.isOptional %}
      guard let value = {% if variable.isStatic %}{{ type.name }}{% else %}self.{{ type.name|lowerFirstWord }}{% endif %}.{{ variable.name }} else {
        return nil;
      }
      {% else %}
      let value = {% if variable.isStatic %}{{ type.name }}{% else %}self.{% endif %}{{ type.name|lowerFirstWord }}.{{ variable.name }}
      {% endif %}

      switch value {
        {% for case in variable.type.cases %}
        {% if case.hasAssociatedValue %}
        case .{{  case.name  }}({% for associatedValue in case.associatedValues %}let value{{ forloop.counter }}{% endfor %}):
            return _ObjC{{ variable.type.name }}{{ case.name|capitalize }}({% for associatedValue in case.associatedValues %}value{{ forloop.counter }} : value{{ forloop.counter }}{% if not forloop.last %},{% endif %}{% endfor %})
        {% else %} case .{{  case.name  }}:
            return _ObjC{{ variable.type.name }}{{ case.name|capitalize }}()
        {% endif %}
        {% endfor %}
      }
    {% if variable.isMutable %}
    }
    {% endif %}
    {% if variable.isMutable %}
    set {
      {% for case in variable.type.cases %}
      if let caseValue = newValue as? _ObjC{{ variable.name|uppercase }}{{ case.name|uppercase }} {
        {% if not case.hasAssociatedValue %}
        self.{{ type.name|lowerFirstWord }}.{{ variable.name }} = .{{ case.name }}
        {% else %}
        self.{{ type.name|lowerFirstWord }}.{{ variable.name }} = .{{ case.name }}({% for associatedValue in case.associatedValues %}{% if associatedValue.localName == nil %}caseValue.value{{ forloop.counter }}{% else %}{{ associatedValue.localName }}: caseValue.value{{ forloop.counter }}{% endif %}{% endfor %})
        {% endif %}
      }
      {% endfor %}
    }
    {% endif %}
  }
  {% endif %}
  {% if variable.type.kind == "struct" %}
  {{ variable.readAccess }} var {{ variable.name }}: _ObjC{{ variable.type.name }} {
    {% if variable.isMutable %}
    get {
    {% endif %}
    {% if variable.isOptional %}
      guard let value = self.{{ type.name|lowerFirstWord }}.{{ variable.name }} else {
          return nil;
      }
    {% else %}
      let value = {% if variable.isStatic %}{{ type.name }}{% else %}self.{{ type.name|lowerFirstWord }}{% endif %}.{{ variable.name }}
    {% endif %}
      return _ObjC{{ variable.type.name }}({{ variable.type.name|lowerFirstWord }}: value)
    {% if variable.isMutable %}
    }
    {% endif %}

    {% if variable.isMutable %}
    set {
      {% if variable.isStatic %}{{ type.name }}{% else %}self.{{ type.name|lowerFirstWord }}{% endif %}.{{ variable.name }} = newValue.{{ variable.type.name|lowerFirstWord }}
    }
    {% endif %}
  }
  {% endif %}

  {% if variable.type.kind != "struct" and variable.type.kind != "enum" and variable.readAccess != "private" %}
  // Forwarding property for native type
  {{ variable.readAccess }} var {{ variable.name }}: {{ variable.typeName }} {
  {% if not variable.isMutable %}
    return {% if variable.isStatic %}{{ type.name }}{% else %}self.{{ type.name|lowerFirstWord }}{% endif %}.{{ variable.name }}
  {% else %}
    get {
      return {% if variable.isStatic %}{{ type.name }}{% else %}self.{{ type.name|lowerFirstWord }}{% endif %}.{{ variable.name }}
    }
    set {
      {% if variable.isStatic %}{{ type.name }}{% else %}self.{{ type.name|lowerFirstWord }}{% endif %}.{{ variable.name }} = newValue
    }
  {% endif %}
  }
  {% endif %}
  {% endfor %}
}
{% endfor %}
